export default {
  async fetch(request, env) {
      const url = new URL(request.url);
      if (url.pathname === '/') {
          return new Response(`<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CloudmailAPI工具箱</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n    <style>\n        /* 全局样式 */\n        :root {\n            --primary: #4361ee;\n            --secondary: #3a0ca3;\n            --success: #4cc9f0;\n            --info: #7209b7;\n            --light: #f8f9fa;\n            --dark: #212529;\n            --danger: #e63946;\n            --warning: #fca311;\n            --gray: #6c757d;\n            --light-blue: #e7f5ff;\n        }\n        \n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n            font-family: \'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        body {\n            background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);\n            color: #333;\n            line-height: 1.6;\n            min-height: 100vh;\n            padding: 0;\n        }\n        \n        /* 导航栏样式 */\n        header {\n            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);\n            color: white;\n            padding: 1.2rem 2rem;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            position: sticky;\n            top: 0;\n            z-index: 100;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .logo {\n            display: flex;\n            align-items: center;\n            gap: 12px;\n        }\n        \n        .logo i {\n            font-size: 1.8rem;\n        }\n        \n        .logo h1 {\n            font-size: 1.8rem;\n            font-weight: 700;\n        }\n        \n        .logo span {\n            font-weight: 300;\n            opacity: 0.9;\n        }\n        \n        /* 主容器 */\n        .main-container {\n            display: flex;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 20px;\n            gap: 20px;\n        }\n        \n        /* 侧边栏 */\n        .sidebar {\n            width: 250px;\n            background: white;\n            border-radius: 12px;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);\n            padding: 20px;\n            height: fit-content;\n            position: sticky;\n            top: 90px;\n        }\n        \n        .sidebar-title {\n            font-size: 1.2rem;\n            color: var(--primary);\n            margin-bottom: 20px;\n            padding-bottom: 10px;\n            border-bottom: 2px solid var(--light-blue);\n            font-weight: 600;\n        }\n        \n        .nav-item {\n            display: flex;\n            align-items: center;\n            padding: 12px 15px;\n            margin-bottom: 8px;\n            border-radius: 8px;\n            cursor: pointer;\n            transition: all 0.3s;\n            color: var(--gray);\n            font-weight: 500;\n        }\n        \n        .nav-item i {\n            margin-right: 10px;\n            font-size: 1.1rem;\n        }\n        \n        .nav-item:hover {\n            background: var(--light-blue);\n            color: var(--primary);\n        }\n        \n        .nav-item.active {\n            background: var(--primary);\n            color: white;\n        }\n        \n        /* 内容区域 */\n        .content {\n            flex: 1;\n            background: white;\n            border-radius: 12px;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);\n            overflow: hidden;\n        }\n        \n        .page {\n            display: none;\n            padding: 0;\n        }\n        \n        .page.active {\n            display: block;\n        }\n        \n        .page-header {\n            background: linear-gradient(135deg, var(--light-blue) 0%, #d4e8ff 100%);\n            padding: 25px 30px;\n            border-bottom: 1px solid #eaeaea;\n        }\n        \n        .page-title {\n            font-size: 1.8rem;\n            color: var(--primary);\n            margin-bottom: 10px;\n        }\n        \n        .page-description {\n            color: var(--gray);\n            font-size: 1.1rem;\n            max-width: 800px;\n        }\n        \n        .page-content {\n            padding: 30px;\n        }\n        \n        /* 卡片样式 */\n        .card {\n            background: white;\n            border-radius: 10px;\n            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);\n            padding: 25px;\n            margin-bottom: 25px;\n            border: 1px solid #eaeaea;\n        }\n        \n        .card-title {\n            font-size: 1.4rem;\n            color: var(--secondary);\n            margin-bottom: 20px;\n            padding-bottom: 10px;\n            border-bottom: 2px solid var(--light-blue);\n        }\n        \n        /* 表单样式 */\n        .form-group {\n            margin-bottom: 20px;\n        }\n        \n        label {\n            display: block;\n            margin-bottom: 8px;\n            font-weight: 600;\n            color: var(--dark);\n        }\n        \n        input, select, textarea {\n            width: 100%;\n            padding: 14px 16px;\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            font-size: 16px;\n            transition: all 0.3s;\n        }\n        \n        input:focus, select:focus, textarea:focus {\n            border-color: var(--primary);\n            outline: none;\n            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);\n        }\n        \n        button {\n            background: var(--primary);\n            color: white;\n            border: none;\n            padding: 14px 25px;\n            border-radius: 8px;\n            cursor: pointer;\n            font-size: 16px;\n            font-weight: 600;\n            transition: all 0.3s;\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n            gap: 8px;\n        }\n        \n        button:hover {\n            background: var(--secondary);\n            transform: translateY(-2px);\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        }\n        \n        button.secondary {\n            background: var(--gray);\n        }\n        \n        button.success {\n            background: var(--success);\n        }\n        \n        button.warning {\n            background: var(--warning);\n        }\n        \n        button.danger {\n            background: var(--danger);\n        }\n        \n        /* 响应区域 */\n        .response-area {\n            background: #2c3e50;\n            color: #ecf0f1;\n            padding: 20px;\n            border-radius: 8px;\n            margin-top: 25px;\n        }\n        \n        .response-title {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 15px;\n            align-items: center;\n        }\n        \n        .response-content {\n            font-family: monospace;\n            white-space: pre-wrap;\n            background: #1a2530;\n            padding: 15px;\n            border-radius: 6px;\n            max-height: 300px;\n            overflow-y: auto;\n        }\n        \n        /* 用户列表 */\n        .users-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin: 20px 0;\n        }\n        \n        .users-table th, .users-table td {\n            padding: 12px 15px;\n            text-align: left;\n            border-bottom: 1px solid #eee;\n        }\n        \n        .users-table thead {\n            background-color: var(--light-blue);\n        }\n        \n        .users-table th {\n            font-weight: 600;\n            color: var(--dark);\n        }\n        \n        /* 页脚 */\n        footer {\n            text-align: center;\n            padding: 25px;\n            margin-top: 40px;\n            color: var(--gray);\n            font-size: 14px;\n            border-top: 1px solid #eee;\n            background: white;\n        }\n        \n        /* 响应式设计 */\n        @media (max-width: 992px) {\n            .main-container {\n                flex-direction: column;\n            }\n            \n            .sidebar {\n                width: 100%;\n                position: relative;\n                top: 0;\n            }\n            \n            .nav-items {\n                display: flex;\n                overflow-x: auto;\n                padding-bottom: 10px;\n            }\n            \n            .nav-item {\n                white-space: nowrap;\n            }\n        }\n        \n        @media (max-width: 768px) {\n            header {\n                padding: 1rem;\n                flex-direction: column;\n                text-align: center;\n                gap: 10px;\n            }\n            \n            .page-content {\n                padding: 20px;\n            }\n            \n            .card {\n                padding: 20px;\n            }\n        }\n        \n        /* 工具特定样式 */\n        .url-note {\n            font-size: 14px;\n            color: var(--gray);\n            margin-top: 5px;\n        }\n        \n        .loader {\n            display: none;\n            text-align: center;\n            margin: 20px 0;\n        }\n        \n        .loader div {\n            width: 12px;\n            height: 12px;\n            background-color: var(--primary);\n            border-radius: 50%;\n            display: inline-block;\n            margin: 0 3px;\n            animation: bounce 1.4s infinite ease-in-out both;\n        }\n        \n        .result {\n            margin-top: 30px;\n            padding: 20px;\n            border-radius: 5px;\n            background-color: #f8f9fa;\n            display: none;\n        }\n        \n        .success {\n            display: block;\n            border-left: 4px solid #2ecc71;\n        }\n        \n        .error {\n            display: block;\n            border-left: 4px solid #e74c3c;\n        }\n        \n        .rules-row {\n            display: flex;\n            gap: 15px;\n            margin-bottom: 15px;\n        }\n        \n        .fixed-role {\n            background-color: #f8f9fa;\n            padding: 12px 15px;\n            border-radius: 6px;\n            border: 1px solid #ddd;\n            color: #495057;\n        }\n        \n        .action-buttons {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n            gap: 10px;\n            margin: 20px 0;\n        }\n        \n        .checkbox-group {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n            margin-bottom: 15px;\n        }\n        \n        @keyframes bounce {\n            0%, 80%, 100% {\n                transform: scale(0);\n            }\n            40% {\n                transform: scale(1);\n            }\n        }\n    </style>\n</head>\n<body>\n    <!-- 导航栏 -->\n    <header>\n        <div class=\"logo\">\n            <i class=\"fas fa-cloud\"></i>\n            <h1>Cloudmail<span>API</span> 工具箱</h1>\n        </div>\n        <div class=\"header-info\">\n            <p>一站式API工具集合，简化您的开发流程</p>\n        </div>\n    </header>\n    \n    <!-- 主容器 -->\n    <div class=\"main-container\">\n        <!-- 侧边栏 -->\n        <div class=\"sidebar\">\n            <h2 class=\"sidebar-title\">工具导航</h2>\n            <div class=\"nav-items\">\n                <div class=\"nav-item active\" data-page=\"token-page\">\n                    <i class=\"fas fa-key\"></i>\n                    <span>生成Token</span>\n                </div>\n                <div class=\"nav-item\" data-page=\"batch-page\">\n                    <i class=\"fas fa-users\"></i>\n                    <span>批量用户注册</span>\n                </div>\n                <div class=\"nav-item\" data-page=\"download-page\">\n                    <i class=\"fas fa-download\"></i>\n                    <span>收件源码下载</span>\n                </div>\n            </div>\n        </div>\n        \n        <!-- 内容区域 -->\n        <div class=\"content\">\n            <!-- 生成Token页面 -->\n            <div id=\"token-page\" class=\"page active\">\n                <div class=\"page-header\">\n                    <h2 class=\"page-title\">Token生成工具</h2>\n                    <p class=\"page-description\">通过API接口生成身份验证令牌，用于访问其他API服务</p>\n                </div>\n                \n                <div class=\"page-content\">\n                    <div class=\"card\">\n                        <h3 class=\"card-title\">请求参数</h3>\n                        <form id=\"tokenForm\">\n                            <div class=\"form-group\">\n                                <label for=\"apiEndpoint\">API接口地址</label>\n                                <input type=\"url\" id=\"apiEndpoint\" placeholder=\"请输入完整的API接口地址，例如：https://api.example.com/api/public/genToken\" required>\n                                <p class=\"url-note\">如果不确定，请保持默认或咨询API提供方</p>\n                            </div>\n                            \n                            <div class=\"form-group\">\n                                <label for=\"email\">管理员邮箱</label>\n                                <input type=\"email\" id=\"email\" placeholder=\"请输入管理员邮箱\" required>\n                            </div>\n                            \n                            <div class=\"form-group\">\n                                <label for=\"password\">邮箱密码</label>\n                                <input type=\"password\" id=\"password\" placeholder=\"请输入邮箱密码\" required>\n                            </div>\n                            \n                            <button type=\"submit\">\n                                <i class=\"fas fa-key\"></i> 生成Token\n                            </button>\n                        </form>\n                    </div>\n                    \n                    <div class=\"loader\" id=\"loader\">\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                    </div>\n                    \n                    <div class=\"result\" id=\"result\">\n                        <h3>请求结果</h3>\n                        <pre id=\"resultContent\"></pre>\n                    </div>\n                    \n                    <div class=\"card\">\n                        <h3 class=\"card-title\">接口说明</h3>\n                        <p><strong>接口方法:</strong> POST</p>\n                        <p><strong>请求参数:</strong></p>\n                        <ul>\n                            <li>email: string (必填) - 管理员邮箱</li>\n                            <li>password: string (必填) - 邮箱密码</li>\n                        </ul>\n                        <p>成功响应将返回包含token的JSON对象</p>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- 批量用户注册页面 -->\n            <div id=\"batch-page\" class=\"page\">\n                <div class=\"page-header\">\n                    <h2 class=\"page-title\">批量用户注册工具</h2>\n                    <p class=\"page-description\">支持批量生成用户账号，自定义生成规则，简化用户管理流程</p>\n                </div>\n                \n                <div class=\"page-content\">\n                    <div class=\"card\">\n                        <h3 class=\"card-title\">接口配置</h3>\n                        <div class=\"form-group\">\n                            <label for=\"api-url\">接口地址</label>\n                            <input type=\"text\" id=\"api-url\" placeholder=\"请输入完整的API接口地址\" value=\"https://example.com/api/public/addUser\">\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"auth-token\">Authorization 令牌</label>\n                            <input type=\"text\" id=\"auth-token\" placeholder=\"请输入身份令牌\">\n                        </div>\n                    </div>\n                    \n                    <div class=\"card\">\n                        <h3 class=\"card-title\">批量生成规则</h3>\n                        <div class=\"form-group\">\n                            <label for=\"user-count\">生成数量</label>\n                            <input type=\"number\" id=\"user-count\" min=\"1\" max=\"1000\" value=\"5\">\n                        </div>\n                        \n                        <div class=\"checkbox-group\">\n                            <input type=\"checkbox\" id=\"use-custom-prefix\">\n                            <label for=\"use-custom-prefix\">使用自定义前缀</label>\n                        </div>\n                        \n                        <div id=\"custom-prefix-container\" style=\"display: none;\">\n                            <div class=\"rules-row\">\n                                <div class=\"form-group\">\n                                    <label for=\"email-prefix\">邮箱前缀</label>\n                                    <input type=\"text\" id=\"email-prefix\" placeholder=\"例如: user\">\n                                </div>\n                                \n                                <div class=\"form-group\">\n                                    <label for=\"random-length\">随机部分长度 (1-8)</label>\n                                    <input type=\"number\" id=\"random-length\" min=\"1\" max=\"8\" value=\"4\">\n                                </div>\n                            </div>\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"email-domain\">邮箱域名</label>\n                            <input type=\"text\" id=\"email-domain\" placeholder=\"例如: @example.com\" value=\"@example.com\">\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"password-type\">密码生成方式</label>\n                            <select id=\"password-type\">\n                                <option value=\"auto\">自动生成随机密码</option>\n                                <option value=\"fixed\">使用固定密码</option>\n                            </select>\n                        </div>\n                        \n                        <div class=\"form-group\" id=\"fixed-password-container\" style=\"display: none;\">\n                            <label for=\"fixed-password\">固定密码</label>\n                            <input type=\"password\" id=\"fixed-password\" placeholder=\"请输入固定密码\">\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label>权限身份</label>\n                            <div class=\"fixed-role\">默认权限 (不可更改)</div>\n                        </div>\n                        \n                        <button class=\"warning\" id=\"generate-users\">\n                            <i class=\"fas fa-cogs\"></i> 批量生成用户\n                        </button>\n                    </div>\n                    \n                    <div class=\"card\">\n                        <h3 class=\"card-title\">添加单个用户</h3>\n                        <div class=\"form-group\">\n                            <label for=\"single-email\">邮箱地址</label>\n                            <input type=\"text\" id=\"single-email\" placeholder=\"例如: user@example.com\">\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"single-password\">密码</label>\n                            <input type=\"password\" id=\"single-password\" placeholder=\"留空则自动生成\">\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label>权限身份</label>\n                            <div class=\"fixed-role\">默认权限 (不可更改)</div>\n                        </div>\n                        \n                        <button class=\"success\" id=\"add-single-user\">\n                            <i class=\"fas fa-user-plus\"></i> 添加单个用户\n                        </button>\n                    </div>\n                    \n                    <div class=\"card\">\n                        <h3 class=\"card-title\">生成用户列表 <span id=\"users-count\">(0 个用户)</span></h3>\n                        <div class=\"users-container\">\n                            <table class=\"users-table\">\n                                <thead>\n                                    <tr>\n                                        <th>#</th>\n                                        <th>邮箱地址</th>\n                                        <th>密码</th>\n                                        <th>权限身份</th>\n                                        <th>操作</th>\n                                    </tr>\n                                </thead>\n                                <tbody id=\"users-list\">\n                                    <tr>\n                                        <td colspan=\"5\" style=\"text-align: center; padding: 20px; color: #6c757d;\">\n                                            尚未生成用户，请添加用户\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                        \n                        <div class=\"action-buttons\">\n                            <button class=\"primary\" id=\"send-request\">\n                                <i class=\"fas fa-paper-plane\"></i> 发送请求\n                            </button>\n                            <button class=\"secondary\" id=\"export-users\">\n                                <i class=\"fas fa-download\"></i> 导出用户\n                            </button>\n                            <button class=\"danger\" id=\"clear-all\">\n                                <i class=\"fas fa-trash\"></i> 清空用户\n                            </button>\n                        </div>\n                    </div>\n                    \n                    <div class=\"response-area\">\n                        <div class=\"response-title\">\n                            <h3>响应结果</h3>\n                            <span class=\"status-indicator status-waiting\" id=\"status-indicator\">等待请求</span>\n                        </div>\n                        <div class=\"response-content\" id=\"response-content\">\n// 响应将显示在这里\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- 收件源码下载页面 -->\n            <div id=\"download-page\" class=\"page\">\n                <div class=\"page-header\">\n                    <h2 class=\"page-title\">收件源码下载</h2>\n                    <p class=\"page-description\">获取Cloudflare Worker部署代码，轻松实现邮件接收功能</p>\n                </div>\n                \n                <div class=\"page-content\">\n                    <div class=\"card\">\n                        <h3 class=\"card-title\">Cloudflare Worker部署方法</h3>\n                        <p>请按照以下步骤部署Worker：</p>\n                        <ol>\n                            <li>登录<a href=\"https://dash.cloudflare.com\" target=\"_blank\">Cloudflare仪表板</a></li>\n                            <li>在左侧导航栏选择「Workers & Pages」</li>\n                            <li>点击「创建应用」→「Worker」→ 输入服务名称（如cloudmail-api）→ 选择区域 → 点击「创建」</li>\n                            <li>进入Worker编辑页面，删除默认代码</li>\n                            <li>复制下方提供的完整work.js代码，粘贴到编辑器中编辑代码中的await fetch(\'/api/public/emailList\', 将/api/public/emailList补全换成你自己的</li>\n                            <li>点击「保存并部署」，等待部署完成</li>\n                            <li>部署成功后，在「路由」设置中添加你的域名规则（如：<code>example.com/*</code>）</li>\n                            <li>api收件访问地址为：<code>https://example.com/?token=你的获取的token（仅读取管理员的）</code></li>\n                        </ol>\n                    </div>\n\n                    <div class=\"card\">\n                        <h3 class=\"card-title\">work.js源码下载</h3>\n                        <a href=\"https://gh.xmly.dev/https://github.com/banfeng-git/cloudmail-api/releases/download/tab/worker.js\" \n                           class=\"download-btn\" \n                           download=\"work.js\">\n                            <i class=\"fas fa-download\"></i> 点击下载work.js\n                        </a>\n                        <p style=\"margin-top: 15px; color: #7f8c8d;\">（注：下载链接为第三方镜像，若无法访问可尝试原GitHub地址）</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <!-- 页脚 -->\n    <footer>\n        <p>© 2023 CloudmailAPI工具箱 | 一站式API工具集合</p>\n    </footer>\n\n    <script>\n        // 页面切换逻辑\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            const navItems = document.querySelectorAll(\'.nav-item\');\n            const pages = document.querySelectorAll(\'.page\');\n            \n            navItems.forEach(item => {\n                item.addEventListener(\'click\', function() {\n                    const targetPage = this.getAttribute(\'data-page\');\n                    \n                    // 更新导航状态\n                    navItems.forEach(nav => nav.classList.remove(\'active\'));\n                    this.classList.add(\'active\');\n                    \n                    // 更新页面显示\n                    pages.forEach(page => page.classList.remove(\'active\'));\n                    document.getElementById(targetPage).classList.add(\'active\');\n                });\n            });\n            \n            // 批量用户注册页面的JavaScript代码\n            const usersList = document.getElementById(\'users-list\');\n            const generateUsersBtn = document.getElementById(\'generate-users\');\n            const addSingleUserBtn = document.getElementById(\'add-single-user\');\n            const sendRequestBtn = document.getElementById(\'send-request\');\n            const clearAllBtn = document.getElementById(\'clear-all\');\n            const exportUsersBtn = document.getElementById(\'export-users\');\n            const responseContent = document.getElementById(\'response-content\');\n            const statusIndicator = document.getElementById(\'status-indicator\');\n            const usersCount = document.getElementById(\'users-count\');\n            const passwordType = document.getElementById(\'password-type\');\n            const useCustomPrefix = document.getElementById(\'use-custom-prefix\');\n            const customPrefixContainer = document.getElementById(\'custom-prefix-container\');\n            \n            let generatedUsers = [];\n            \n            // 显示/隐藏固定密码输入框\n            passwordType.addEventListener(\'change\', function() {\n                const fixedPasswordContainer = document.getElementById(\'fixed-password-container\');\n                fixedPasswordContainer.style.display = this.value === \'fixed\' ? \'block\' : \'none\';\n            });\n            \n            // 显示/隐藏自定义前缀输入框\n            useCustomPrefix.addEventListener(\'change\', function() {\n                customPrefixContainer.style.display = this.checked ? \'block\' : \'none\';\n            });\n            \n            // 生成随机字符串（字母和数字）\n            function generateRandomString(length = 8, numbersOnly = false) {\n                const letters = \'abcdefghijklmnopqrstuvwxyz\';\n                const numbers = \'0123456789\';\n                const chars = numbersOnly ? numbers : letters + numbers;\n                let result = \'\';\n                for (let i = 0; i < length; i++) {\n                    result += chars.charAt(Math.floor(Math.random() * chars.length));\n                }\n                return result;\n            }\n            \n            // 生成随机密码\n            function generateRandomPassword() {\n                return generateRandomString(12);\n            }\n            \n            // 生成用户\n            generateUsersBtn.addEventListener(\'click\', function() {\n                const count = parseInt(document.getElementById(\'user-count\').value) || 5;\n                const usePrefix = document.getElementById(\'use-custom-prefix\').checked;\n                const emailPrefix = document.getElementById(\'email-prefix\').value;\n                const randomLength = parseInt(document.getElementById(\'random-length\').value) || 4;\n                const domain = document.getElementById(\'email-domain\').value;\n                const passwordTypeValue = document.getElementById(\'password-type\').value;\n                const fixedPassword = document.getElementById(\'fixed-password\').value;\n                \n                // 确定域名\n                let emailDomain = domain;\n                if (!emailDomain.startsWith(\'@\')) {\n                    emailDomain = \'@\' + emailDomain;\n                }\n                \n                // 清空之前的用户\n                generatedUsers = [];\n                \n                // 生成用户列表\n                for (let i = 1; i <= count; i++) {\n                    // 生成邮箱\n                    let email;\n                    if (usePrefix && emailPrefix) {\n                        // 使用自定义前缀 + 随机部分\n                        const randomPart = generateRandomString(randomLength);\n                        email = \`\${emailPrefix}\${randomPart}\${emailDomain}\`;\n                    } else {\n                        // 完全随机生成账号（字母+数字，最大8位）\n                        const randomLength = Math.floor(Math.random() * 8) + 1; // 1-8位随机长度\n                        email = \`\${generateRandomString(randomLength)}\${emailDomain}\`;\n                    }\n                    \n                    // 生成密码\n                    let password;\n                    if (passwordTypeValue === \'fixed\' && fixedPassword) {\n                        password = fixedPassword;\n                    } else {\n                        password = generateRandomPassword();\n                    }\n                    \n                    generatedUsers.push({\n                        email: email,\n                        password: password,\n                        // 不发送roleName字段，使用默认权限\n                    });\n                }\n                \n                // 更新用户列表显示\n                updateUsersList();\n            });\n            \n            // 添加单个用户\n            addSingleUserBtn.addEventListener(\'click\', function() {\n                const email = document.getElementById(\'single-email\').value;\n                let password = document.getElementById(\'single-password\').value;\n                \n                if (!email) {\n                    alert(\'请输入邮箱地址！\');\n                    return;\n                }\n                \n                // 如果密码为空，则自动生成\n                if (!password) {\n                    password = generateRandomPassword();\n                }\n                \n                generatedUsers.push({\n                    email: email,\n                    password: password,\n                    // 不发送roleName字段，使用默认权限\n                });\n                \n                // 清空单个用户表单\n                document.getElementById(\'single-email\').value = \'\';\n                document.getElementById(\'single-password\').value = \'\';\n                \n                // 更新用户列表显示\n                updateUsersList();\n            });\n            \n            // 更新用户列表显示\n            function updateUsersList() {\n                usersList.innerHTML = \'\';\n                \n                if (generatedUsers.length === 0) {\n                    usersList.innerHTML = \`\n                        <tr>\n                            <td colspan=\"5\" style=\"text-align: center; padding: 20px; color: #6c757d;\">\n                                尚未生成用户，请添加用户\n                            </td>\n                        </tr>\n                    \`;\n                    usersCount.textContent = \'(0 个用户)\';\n                    return;\n                }\n                \n                generatedUsers.forEach((user, index) => {\n                    const row = document.createElement(\'tr\');\n                    row.innerHTML = \`\n                        <td>\${index + 1}</td>\n                        <td>\${user.email}</td>\n                        <td>\${user.password}</td>\n                        <td>默认</td>\n                        <td>\n                            <button class=\"btn-danger delete-user\" data-index=\"\${index}\" style=\"padding: 5px 10px; font-size: 12px;\">\n                                <i class=\"fas fa-trash\"></i>\n                            </button>\n                        </td>\n                    \`;\n                    usersList.appendChild(row);\n                });\n                \n                // 添加删除单个用户的功能\n                document.querySelectorAll(\'.delete-user\').forEach(button => {\n                    button.addEventListener(\'click\', function() {\n                        const index = parseInt(this.getAttribute(\'data-index\'));\n                        generatedUsers.splice(index, 1);\n                        updateUsersList();\n                    });\n                });\n                \n                usersCount.textContent = \`(\${generatedUsers.length} 个用户)\`;\n            }\n            \n            // 清空用户\n            clearAllBtn.addEventListener(\'click\', function() {\n                if (confirm(\'确定要清空所有用户数据吗？\')) {\n                    generatedUsers = [];\n                    updateUsersList();\n                }\n            });\n            \n            // 发送请求\n            sendRequestBtn.addEventListener(\'click\', function() {\n                const apiUrl = document.getElementById(\'api-url\').value;\n                const authToken = document.getElementById(\'auth-token\').value;\n                \n                // 验证必填字段\n                if (!apiUrl) {\n                    alert(\'请输入接口地址！\');\n                    return;\n                }\n                \n                if (!authToken) {\n                    alert(\'请输入Authorization令牌！\');\n                    return;\n                }\n                \n                if (generatedUsers.length === 0) {\n                    alert(\'请先生成用户！\');\n                    return;\n                }\n                \n                // 构建请求数据\n                const requestData = {\n                    list: generatedUsers\n                };\n                \n                // 更新UI为正在加载状态\n                sendRequestBtn.disabled = true;\n                sendRequestBtn.innerHTML = \'<i class=\"fas fa-spinner fa-spin\"></i> 发送中...\';\n                statusIndicator.textContent = \'请求中\';\n                statusIndicator.className = \'status-indicator status-waiting\';\n                responseContent.textContent = \'正在发送请求...\';\n                \n                // 使用fetch发送真实请求\n                fetch(apiUrl, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        \'Authorization\': authToken\n                    },\n                    body: JSON.stringify(requestData)\n                })\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(\'网络响应不正常\');\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    statusIndicator.textContent = \'成功\';\n                    statusIndicator.className = \'status-indicator status-success\';\n                    responseContent.textContent = JSON.stringify(data, null, 2);\n                })\n                .catch(error => {\n                    statusIndicator.textContent = \'错误\';\n                    statusIndicator.className = \'status-indicator status-error\';\n                    responseContent.textContent = JSON.stringify({\n                        status: \'error\',\n                        message: \'请求失败: \' + error.message,\n                        errorCode: \'REQUEST_FAILED\'\n                    }, null, 2);\n                })\n                .finally(() => {\n                    // 恢复按钮状态\n                    sendRequestBtn.disabled = false;\n                    sendRequestBtn.innerHTML = \'<i class=\"fas fa-paper-plane\"></i> 发送请求\';\n                });\n            });\n            \n            // 导出用户为TXT格式\n            exportUsersBtn.addEventListener(\'click\', function() {\n                if (generatedUsers.length === 0) {\n                    alert(\'没有用户数据可导出！\');\n                    return;\n                }\n                \n                // 生成TXT内容，格式为：邮箱----密码\n                let txtContent = \'\';\n                generatedUsers.forEach(user => {\n                    txtContent += \`\${user.email}----\${user.password}\\n\`;\n                });\n                \n                const blob = new Blob([txtContent], { type: \'text/plain\' });\n                const url = URL.createObjectURL(blob);\n                \n                const a = document.createElement(\'a\');\n                a.href = url;\n                a.download = \'users.txt\';\n                a.click();\n                \n                URL.revokeObjectURL(url);\n            });\n            \n            // Token生成页面的JavaScript代码\n            document.getElementById(\'tokenForm\').addEventListener(\'submit\', async function(e) {\n                e.preventDefault();\n                \n                const apiEndpoint = document.getElementById(\'apiEndpoint\').value;\n                const email = document.getElementById(\'email\').value;\n                const password = document.getElementById(\'password\').value;\n                const resultDiv = document.getElementById(\'result\');\n                const resultContent = document.getElementById(\'resultContent\');\n                const loader = document.getElementById(\'loader\');\n                \n                // 验证URL格式\n                if (!isValidUrl(apiEndpoint)) {\n                    resultDiv.className = \'result error\';\n                    resultContent.textContent = \'错误：请输入有效的API接口地址，例如 https://api.example.com/api/public/genToken\';\n                    resultDiv.style.display = \'block\';\n                    return;\n                }\n                \n                // 显示加载动画\n                loader.style.display = \'block\';\n                resultDiv.style.display = \'none\';\n                \n                try {\n                    // 发送POST请求\n                    const response = await fetch(apiEndpoint, {\n                        method: \'POST\',\n                        headers: {\n                            \'Content-Type\': \'application/json\'\n                        },\n                        body: JSON.stringify({\n                            email: email,\n                            password: password\n                        })\n                    });\n                    \n                    const data = await response.json();\n                    \n                    // 隐藏加载动画\n                    loader.style.display = \'none\';\n                    \n                    // 显示结果\n                    resultDiv.className = response.ok ? \'result success\' : \'result error\';\n                    resultContent.textContent = JSON.stringify(data, null, 2);\n                    resultDiv.style.display = \'block\';\n                    \n                } catch (error) {\n                    // 隐藏加载动画\n                    loader.style.display = \'none\';\n                    \n                    // 显示错误\n                    resultDiv.className = \'result error\';\n                    resultContent.textContent = \'请求失败: \' + error.message;\n                    resultDiv.style.display = \'block\';\n                }\n            });\n            \n            // 简单的URL验证函数\n            function isValidUrl(string) {\n                try {\n                    new URL(string);\n                    return true;\n                } catch (_) {\n                    return false;\n                }\n            }\n        });\n    </script>\n</body>\n</html>`, {
              headers: { 'Content-Type': 'text/html; charset=utf-8' }
          });
      }
      return new Response('Not Found', { status: 404 });
  }
}